/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/ifftscreen_screen/ifftScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


ifftScreenViewBase::ifftScreenViewBase() :
    buttonCallback(this, &ifftScreenViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &ifftScreenViewBase::sliderValueChangedCallbackHandler),
    sliderValueConfirmedCallback(this, &ifftScreenViewBase::sliderValueConfirmedCallbackHandler),
    radioButtonSelectedCallback(this, &ifftScreenViewBase::radioButtonSelectedCallbackHandler)
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    box1.setPosition(0, 0, 800, 480);
    box1.setColor(touchgfx::Color::getColorFromRGB(56, 44, 44));

    slider1.setXY(15, 255);
    slider1.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_SLIDER_HORIZONTAL_LARGE_SLIDER_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_DARK_SLIDER_HORIZONTAL_LARGE_SLIDER_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_DARK_SLIDER_HORIZONTAL_LARGE_INDICATORS_SLIDER_ROUND_NOB_ID));
    slider1.setupHorizontalSlider(5, 24, 0, 0, 615);
    slider1.setValueRange(0, 100);
    slider1.setValue(90);

    boxWithBorder1.setPosition(15, 38, 237, 193);
    boxWithBorder1.setColor(touchgfx::Color::getColorFromRGB(64, 64, 64));
    boxWithBorder1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    boxWithBorder1.setBorderSize(5);

    attackSlider.setXY(15, 344);
    attackSlider.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_SLIDER_HORIZONTAL_LARGE_SLIDER_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_DARK_SLIDER_HORIZONTAL_LARGE_SLIDER_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_DARK_SLIDER_HORIZONTAL_LARGE_INDICATORS_SLIDER_ROUND_NOB_ID));
    attackSlider.setupHorizontalSlider(5, 24, 0, 0, 615);
    attackSlider.setValueRange(0, 100);
    attackSlider.setValue(50);
    attackSlider.setNewValueCallback(sliderValueChangedCallback);

    releasaSlider.setXY(15, 412);
    releasaSlider.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_SLIDER_HORIZONTAL_LARGE_SLIDER_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_DARK_SLIDER_HORIZONTAL_LARGE_SLIDER_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_DARK_SLIDER_HORIZONTAL_LARGE_INDICATORS_SLIDER_ROUND_NOB_ID));
    releasaSlider.setupHorizontalSlider(5, 24, 0, 0, 615);
    releasaSlider.setValueRange(0, 100);
    releasaSlider.setValue(50);
    releasaSlider.setNewValueCallback(sliderValueChangedCallback);

    dynamicGraph1_1.setScale(1);
    dynamicGraph1_1.setPosition(21, 45, 224, 178);
    dynamicGraph1_1.setGraphAreaMargin(0, 0, 0, 0);
    dynamicGraph1_1.setGraphAreaPadding(0, 0, 0, 0);
    dynamicGraph1_1.setGraphRangeY(0, 100);

    dynamicGraph1_1Line1Painter.setColor(touchgfx::Color::getColorFromRGB(157, 240, 137));
    dynamicGraph1_1Line1.setPainter(dynamicGraph1_1Line1Painter);
    dynamicGraph1_1Line1.setLineWidth(2);
    dynamicGraph1_1.addGraphElement(dynamicGraph1_1Line1);

    dynamicGraph1_1.addDataPoint(66.49193f);
    dynamicGraph1_1.addDataPoint(50.10224f);
    dynamicGraph1_1.addDataPoint(35.91681f);
    dynamicGraph1_1.addDataPoint(26.44766f);
    dynamicGraph1_1.addDataPoint(23.00153f);
    dynamicGraph1_1.addDataPoint(25.4003f);
    dynamicGraph1_1.addDataPoint(32.06532f);
    dynamicGraph1_1.addDataPoint(40.44343f);
    dynamicGraph1_1.addDataPoint(47.66883f);
    dynamicGraph1_1.addDataPoint(51.29716f);
    dynamicGraph1_1.addDataPoint(49.93091f);
    dynamicGraph1_1.addDataPoint(43.58189f);
    dynamicGraph1_1.addDataPoint(33.68115f);
    dynamicGraph1_1.addDataPoint(22.73362f);
    dynamicGraph1_1.addDataPoint(13.70148f);
    dynamicGraph1_1.addDataPoint(9.26779f);
    dynamicGraph1_1.addDataPoint(11.16069f);
    dynamicGraph1_1.addDataPoint(19.70471f);
    dynamicGraph1_1.addDataPoint(33.70992f);
    dynamicGraph1_1.addDataPoint(50.72727f);
    dynamicGraph1_1.addDataPoint(67.60915f);
    dynamicGraph1_1.addDataPoint(81.23942f);
    dynamicGraph1_1.addDataPoint(89.25582f);
    dynamicGraph1_1.addDataPoint(90.58941f);
    dynamicGraph1_1.addDataPoint(85.69073f);
    dynamicGraph1_1.addDataPoint(76.38844f);
    dynamicGraph1_1.addDataPoint(65.41656f);
    dynamicGraph1_1.addDataPoint(55.72688f);
    dynamicGraph1_1.addDataPoint(49.75566f);
    dynamicGraph1_1.addDataPoint(48.8246f);
    dynamicGraph1_1.addDataPoint(52.82285f);
    dynamicGraph1_1.addDataPoint(60.24766f);
    dynamicGraph1_1.addDataPoint(68.59317f);
    dynamicGraph1_1.addDataPoint(74.99137f);
    dynamicGraph1_1.addDataPoint(76.94716f);
    dynamicGraph1_1.addDataPoint(72.98628f);
    dynamicGraph1_1.addDataPoint(63.05593f);
    dynamicGraph1_1.addDataPoint(48.57846f);
    dynamicGraph1_1.addDataPoint(32.14335f);
    dynamicGraph1_1.addDataPoint(16.9113f);
    dynamicGraph1_1.addDataPoint(5.87481f);
    dynamicGraph1_1.addDataPoint(1.15485f);
    dynamicGraph1_1.addDataPoint(3.50476f);
    dynamicGraph1_1.addDataPoint(12.14186f);
    dynamicGraph1_1.addDataPoint(24.9473f);
    dynamicGraph1_1.addDataPoint(38.98505f);
    dynamicGraph1_1.addDataPoint(51.21276f);
    dynamicGraph1_1.addDataPoint(59.21091f);
    dynamicGraph1_1.addDataPoint(61.75232f);
    dynamicGraph1_1.addDataPoint(59.07343f);
    dynamicGraph1_1.addDataPoint(52.78222f);
    dynamicGraph1_1.addDataPoint(45.42651f);
    dynamicGraph1_1.addDataPoint(39.83006f);
    dynamicGraph1_1.addDataPoint(38.36038f);
    dynamicGraph1_1.addDataPoint(42.30937f);
    dynamicGraph1_1.addDataPoint(51.53981f);
    dynamicGraph1_1.addDataPoint(64.48594f);
    dynamicGraph1_1.addDataPoint(78.50909f);
    dynamicGraph1_1.addDataPoint(90.52256f);
    dynamicGraph1_1.addDataPoint(97.73356f);
    dynamicGraph1_1.addDataPoint(98.32101f);
    dynamicGraph1_1.addDataPoint(91.88367f);
    dynamicGraph1_1.addDataPoint(79.54862f);
    dynamicGraph1_1.addDataPoint(63.7132f);
    dynamicGraph1_1.addDataPoint(47.48289f);
    dynamicGraph1_1.addDataPoint(33.94175f);
    dynamicGraph1_1.addDataPoint(25.43281f);
    dynamicGraph1_1.addDataPoint(23.02314f);
    dynamicGraph1_1.addDataPoint(26.28315f);
    dynamicGraph1_1.addDataPoint(33.4324f);
    dynamicGraph1_1.addDataPoint(41.81466f);
    dynamicGraph1_1.addDataPoint(48.58438f);
    dynamicGraph1_1.addDataPoint(51.435f);
    dynamicGraph1_1.addDataPoint(49.18954f);
    dynamicGraph1_1.addDataPoint(42.10789f);
    dynamicGraph1_1.addDataPoint(31.83473f);
    dynamicGraph1_1.addDataPoint(21.00037f);
    dynamicGraph1_1.addDataPoint(12.57223f);
    dynamicGraph1_1.addDataPoint(9.11573f);
    dynamicGraph1_1.addDataPoint(12.14616f);
    dynamicGraph1_1.addDataPoint(21.73107f);
    dynamicGraph1_1.addDataPoint(36.44139f);
    dynamicGraph1_1.addDataPoint(53.66477f);
    dynamicGraph1_1.addDataPoint(70.20574f);
    dynamicGraph1_1.addDataPoint(83.02734f);
    dynamicGraph1_1.addDataPoint(89.95429f);
    dynamicGraph1_1.addDataPoint(90.16716f);
    dynamicGraph1_1.addDataPoint(84.36804f);
    dynamicGraph1_1.addDataPoint(74.57859f);
    dynamicGraph1_1.addDataPoint(63.62105f);
    dynamicGraph1_1.addDataPoint(54.41032f);
    dynamicGraph1_1.addDataPoint(49.23103f);
    dynamicGraph1_1.addDataPoint(49.177f);
    dynamicGraph1_1.addDataPoint(53.89038f);
    dynamicGraph1_1.addDataPoint(61.66407f);
    dynamicGraph1_1.addDataPoint(69.88173f);
    dynamicGraph1_1.addDataPoint(75.68675f);
    dynamicGraph1_1.addDataPoint(76.71535f);
    dynamicGraph1_1.addDataPoint(71.71289f);
    dynamicGraph1_1.addDataPoint(60.88102f);

    SIN_Button.setXY(271, 112);
    SIN_Button.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_CHECK_BUTTONS_CHECK_MARK_INACTIVE_ID), touchgfx::Bitmap(BITMAP_DARK_CHECK_BUTTONS_CHECK_MARK_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_CHECK_BUTTONS_CHECK_MARK_ACTIVE_ID), touchgfx::Bitmap(BITMAP_DARK_CHECK_BUTTONS_CHECK_MARK_NORMAL_ID));
    SIN_Button.setSelected(true);
    SIN_Button.setDeselectionEnabled(false);

    SQR_Button.setXY(271, 187);
    SQR_Button.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_CHECK_BUTTONS_CHECK_MARK_INACTIVE_ID), touchgfx::Bitmap(BITMAP_DARK_CHECK_BUTTONS_CHECK_MARK_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_CHECK_BUTTONS_CHECK_MARK_ACTIVE_ID), touchgfx::Bitmap(BITMAP_DARK_CHECK_BUTTONS_CHECK_MARK_NORMAL_ID));
    SQR_Button.setSelected(false);
    SQR_Button.setDeselectionEnabled(false);

    SAW_Button.setXY(271, 38);
    SAW_Button.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_CHECK_BUTTONS_CHECK_MARK_INACTIVE_ID), touchgfx::Bitmap(BITMAP_DARK_CHECK_BUTTONS_CHECK_MARK_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_CHECK_BUTTONS_CHECK_MARK_ACTIVE_ID), touchgfx::Bitmap(BITMAP_DARK_CHECK_BUTTONS_CHECK_MARK_NORMAL_ID));
    SAW_Button.setSelected(false);
    SAW_Button.setDeselectionEnabled(false);

    waveFormOrderSlider.setXY(378, 38);
    waveFormOrderSlider.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_DARK_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_DARK_SLIDER_VERTICAL_SMALL_INDICATORS_SLIDER3_VERTICAL_ROUND_NOB_ID));
    waveFormOrderSlider.setupVerticalSlider(0, 0, 3, 4, 135);
    waveFormOrderSlider.setValueRange(1, 25);
    waveFormOrderSlider.setValue(5);
    waveFormOrderSlider.setStopValueCallback(sliderValueConfirmedCallback);

    commaSlider.setXY(530, 38);
    commaSlider.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_DARK_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_DARK_SLIDER_VERTICAL_SMALL_INDICATORS_SLIDER3_VERTICAL_ROUND_NOB_ID));
    commaSlider.setupVerticalSlider(0, 0, 3, 4, 135);
    commaSlider.setValueRange(1, 10);
    commaSlider.setValue(1);
    commaSlider.setStopValueCallback(sliderValueConfirmedCallback);

    textHarmonization.setXY(710, 277);
    textHarmonization.setColor(touchgfx::Color::getColorFromRGB(176, 176, 176));
    textHarmonization.setLinespacing(0);
    textHarmonization.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9TY6));

    textAttack.setXY(710, 366);
    textAttack.setColor(touchgfx::Color::getColorFromRGB(176, 176, 176));
    textAttack.setLinespacing(0);
    textAttack.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ECYK));

    textRelease.setXY(709, 434);
    textRelease.setColor(touchgfx::Color::getColorFromRGB(176, 176, 176));
    textRelease.setLinespacing(0);
    textRelease.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ISHT));

    textSAW.setXY(324, 48);
    textSAW.setColor(touchgfx::Color::getColorFromRGB(176, 176, 176));
    textSAW.setLinespacing(0);
    textSAW.setTypedText(touchgfx::TypedText(T___SINGLEUSE_SYL5));

    textSIN.setXY(327, 122);
    textSIN.setColor(touchgfx::Color::getColorFromRGB(176, 176, 176));
    textSIN.setLinespacing(0);
    textSIN.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XHCB));

    textSQR.setXY(324, 198);
    textSQR.setColor(touchgfx::Color::getColorFromRGB(176, 176, 176));
    textSQR.setLinespacing(0);
    textSQR.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XP6B));

    textComma.setXY(512, 13);
    textComma.setColor(touchgfx::Color::getColorFromRGB(176, 176, 176));
    textComma.setLinespacing(0);
    textComma.setTypedText(touchgfx::TypedText(T___SINGLEUSE_M30I));

    startFreqSlider.setXY(643, 38);
    startFreqSlider.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_DARK_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_DARK_SLIDER_VERTICAL_SMALL_INDICATORS_SLIDER3_VERTICAL_ROUND_NOB_ID));
    startFreqSlider.setupVerticalSlider(0, 0, 3, 4, 135);
    startFreqSlider.setValueRange(20, 200);
    startFreqSlider.setValue(50);
    startFreqSlider.setStopValueCallback(sliderValueConfirmedCallback);

    textStartFreq.setXY(629, 13);
    textStartFreq.setColor(touchgfx::Color::getColorFromRGB(176, 176, 176));
    textStartFreq.setLinespacing(0);
    textStartFreq.setTypedText(touchgfx::TypedText(T___SINGLEUSE_SKGI));

    saveButton.setXY(740, 0);
    saveButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
    saveButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_YOFK));
    saveButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    saveButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    saveButton.setAction(buttonCallback);

    textOrder.setXY(370, 13);
    textOrder.setColor(touchgfx::Color::getColorFromRGB(176, 176, 176));
    textOrder.setLinespacing(0);
    textOrder.setTypedText(touchgfx::TypedText(T___SINGLEUSE_E089));

    menuButton.setXY(740, 60);
    menuButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
    menuButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_089L));
    menuButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    menuButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    menuButton.setAction(buttonCallback);

    add(__background);
    add(box1);
    add(slider1);
    add(boxWithBorder1);
    add(attackSlider);
    add(releasaSlider);
    add(dynamicGraph1_1);
    add(SIN_Button);
    add(SQR_Button);
    add(SAW_Button);
    add(waveFormOrderSlider);
    add(commaSlider);
    add(textHarmonization);
    add(textAttack);
    add(textRelease);
    add(textSAW);
    add(textSIN);
    add(textSQR);
    add(textComma);
    add(startFreqSlider);
    add(textStartFreq);
    add(saveButton);
    add(textOrder);
    add(menuButton);
    radioButtonGroup1.add(SIN_Button);
    radioButtonGroup1.add(SQR_Button);
    radioButtonGroup1.add(SAW_Button);
    radioButtonGroup1.setRadioButtonSelectedHandler(radioButtonSelectedCallback);
}

void ifftScreenViewBase::setupScreen()
{

}

void ifftScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &saveButton)
    {
        //saveButtonClicked
        //When saveButton clicked call virtual function
        //Call saveButtonClicked
        saveButtonClicked();
    }
    else if (&src == &menuButton)
    {
        //Interaction1
        //When menuButton clicked change screen to mainScreen
        //Go to mainScreen with no screen transition
        application().gotomainScreenScreenNoTransition();
    }
}

void ifftScreenViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &attackSlider)
    {
        //attackSliderChanged
        //When attackSlider value changed call virtual function
        //Call attackSliderChanged
        attackSliderChanged(value);
    }
    else if (&src == &releasaSlider)
    {
        //releaseSliderChanged
        //When releasaSlider value changed call virtual function
        //Call releaseSliderChanged
        releaseSliderChanged(value);
    }
}

void ifftScreenViewBase::sliderValueConfirmedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &waveFormOrderSlider)
    {
        //waveFormOrderSliderChanged
        //When waveFormOrderSlider value confirmed call virtual function
        //Call waveFormOrderSliderChanged
        waveFormOrderSliderChanged(value);
    }
    else if (&src == &commaSlider)
    {
        //commaSliderChanged
        //When commaSlider value confirmed call virtual function
        //Call commaSliderChanged
        commaSliderChanged(value);
    }
    else if (&src == &startFreqSlider)
    {
        //startFreqSliderChanged
        //When startFreqSlider value confirmed call virtual function
        //Call startFreqSliderChanged
        startFreqSliderChanged(value);
    }
}

void ifftScreenViewBase::radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &SAW_Button)
    {
        //sawButtonSelected
        //When SAW_Button selected call virtual function
        //Call sawButtonSelected
        sawButtonSelected();
    }
    else if (&src == &SQR_Button)
    {
        //sqrButtonSelected
        //When SQR_Button selected call virtual function
        //Call sqrButtonSelected
        sqrButtonSelected();
    }
    else if (&src == &SIN_Button)
    {
        //sinButtonSelected
        //When SIN_Button selected call virtual function
        //Call sinButtonSelected
        sinButtonSelected();
    }
}
